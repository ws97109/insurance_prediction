🤖 DQN + XGBoost 保險預測系統 - 專案結構
================================================================================

insurance_perdiction/
│
├── 📊 核心模型檔案
│   ├── dqn_xgboost_model.py          # DQN + XGBoost 混合模型核心
│   ├── train_model.py                 # 模型訓練腳本
│   └── trained_model.pkl              # 訓練好的模型 (8.2 MB)
│
├── 🌐 Web 應用
│   ├── app.py                         # Flask API (Port 8080)
│   └── templates/
│       └── index.html                 # Web 前端介面
│
├── 📚 文檔
│   ├── README.md                      # 完整技術文檔
│   ├── START_GUIDE.md                 # 快速啟動指南
│   ├── SYSTEM_SUMMARY.md              # 系統整理總結
│   ├── PROJECT_STRUCTURE.txt          # 本檔案
│   └── ANALYSIS_REPORT.md             # 原始分析報告
│
├── 📈 分析與視覺化
│   └── dqn_xgboost_analysis.png       # 訓練分析圖表
│
├── 📦 配置
│   └── requirements.txt               # Python 依賴套件
│
└── 📁 數據集
    └── insurance+company+benchmark+coil+2000/
        ├── ticdata2000.txt            # 訓練資料 (5,822 筆)
        ├── ticeval2000.txt            # 評估資料 (4,000 筆)
        └── tictgts2000.txt            # 評估標籤

================================================================================
🎯 快速啟動
================================================================================

1. 安裝依賴:
   pip install -r requirements.txt

2. 啟動系統:
   python3 app.py

3. 訪問介面:
   http://localhost:8080

================================================================================
📊 模型架構
================================================================================

DQN (Deep Q-Network)
├─ Input Layer:  85 features
├─ Hidden Layer 1: 256 neurons (ReLU + Dropout 0.2)
├─ Hidden Layer 2: 128 neurons (ReLU + Dropout 0.2)
├─ Hidden Layer 3: 64 neurons (ReLU + Dropout 0.2)
└─ Output Layer: 32 extracted features

XGBoost Classifier
├─ Input: 117 features (85 original + 32 DQN)
├─ Trees: 200
├─ Max Depth: 6
└─ Output: Prediction + Probability

================================================================================
🔗 API 端點
================================================================================

GET  /                           → Web 介面
GET  /api/info                   → 模型資訊
POST /api/predict                → 單筆預測
POST /api/predict_batch          → 批量預測
POST /api/predict_batch/download → 下載 CSV
GET  /api/feature_importance     → 特徵重要性
GET  /api/example                → 範例輸入

================================================================================
📈 模型性能
================================================================================

測試準確率:     91.59%
ROC-AUC 分數:   56.09%
訓練時間:       ~2-3 分鐘
總特徵數:       117 (85原始 + 32DQN)

================================================================================
🛠️ 技術棧
================================================================================

深度學習:       PyTorch 2.1.2
機器學習:       XGBoost 2.0.3, scikit-learn 1.3.2
Web 框架:       Flask 3.0.0
數據處理:       Pandas 2.1.4, NumPy 1.26.2
視覺化:         Matplotlib 3.8.2, Seaborn 0.13.0

================================================================================
✨ 主要特色
================================================================================

✅ 深度學習特徵提取 (DQN)
✅ 強化學習優化決策
✅ 梯度提升分類 (XGBoost)
✅ REST API 介面
✅ Web 圖形介面
✅ 批量預測功能
✅ 特徵重要性分析
✅ 完整視覺化報告

================================================================================
📝 檔案說明
================================================================================

dqn_xgboost_model.py
    - DQN 網路定義
    - Experience Replay Memory
    - 混合模型訓練邏輯
    - 特徵提取功能

train_model.py
    - 載入數據
    - 訓練 DQN + XGBoost
    - 評估性能
    - 保存模型
    - 生成視覺化

app.py
    - Flask Web 應用
    - REST API 端點
    - 單筆/批量預測
    - 檔案上傳處理

index.html
    - Web 前端介面
    - 四個功能選項卡
    - 即時預測顯示
    - API 文檔展示

================================================================================
🎓 使用場景
================================================================================

1. 行銷活動
   → 篩選高潛力客戶進行精準行銷

2. 客服系統
   → 即時評估客戶購買意願

3. 數據分析
   → 批量處理客戶資料生成報告

4. 模型研究
   → 研究 DQN 特徵學習能力

================================================================================
🚀 下一步
================================================================================

□ 增加訓練 episodes 提升性能
□ 調整網路架構優化特徵提取
□ 實現線上學習能力
□ 部署到生產環境
□ 增加模型監控功能

================================================================================
